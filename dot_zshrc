# -*-mode:sh-*- vim:ft=shell-script

# ~/.zshrc
# =============================================================================

# shellcheck shell=bash
# shellcheck source=/dev/null
# shellcheck disable=SC2034

# Hide default user from local prompt.
export DEFAULT_USER="${USER}"

# Disable autosuggestion for large buffers.
export ZSH_AUTOSUGGEST_BUFFER_MAX_SIZE="20"

# Path to your oh-my-zsh installation.
export ZSH="${HOME}/.oh-my-zsh"

ZSH_THEME="powerlevel10k/powerlevel10k"

CASE_SENSITIVE="true"
HIST_STAMPS="yyyy-mm-dd"

# PATH manipulation
export PATH="$PATH:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin"

[ -d "/Applications/Visual Studio Code.app/Contents/Resources/app/bin/" ] && export PATH="$PATH:/Applications/Visual Studio Code.app/Contents/Resources/app/bin"
[ -d "/usr/local/sbin/" ] && export PATH="/usr/local/sbin:$PATH"
[ -d "$HOME/.bin/" ] && export PATH="$HOME/bin:$PATH"
[ -d "$HOME/.mix/" ] && export PATH="$HOME/.mix/:$PATH"
[ -d "$HOME/.mix/escripts/" ] && export PATH="$HOME/.mix/escripts:$PATH"
[ -d "$HOME/.cargo/bin/" ] && export PATH="$HOME/.cargo/bin:$PATH"

# Plugins to load
plugins=(
    alias-finder
    asdf
    colorize
    copydir
    copyfile
    dotenv
    emoji
    git-extras
    git-flow
    gitfast
    gitignore
    pip
    rsync
    rustup
    virtualenv
    z
)

if [[ "$OSTYPE" =~ ^darwin ]]; then
    plugins+=(
        macos
    )
fi

# You may need to manually set your language environment
export LANG=en_US.UTF-8

# Set preferred editor for local and remote sessions.
# export EDITOR='code -w'
if [[ -n $SSH_CONNECTION ]]; then
    export EDITOR='nano'
    elif command -v code > /dev/null; then
    export EDITOR='code';
    elif command -v nvim > /dev/null; then
    export EDITOR='nvim';
else
    export EDITOR='vim'
fi

# Provide Homebrew completions (if installed).
# See https://docs.brew.sh/Shell-Completion
if type brew &>/dev/null; then
    FPATH=$(brew --prefix)/share/zsh/site-functions:$FPATH
    
    autoload -Uz compinit
    compinit
fi

# Provide Chezmoi completions (if installed).
# See https://github.com/twpayne/chezmoi/blob/master/docs/REFERENCE.md
if command -v chezmoi > /dev/null; then
    eval "$(chezmoi completion zsh)"
fi

# Enable ASDF Extendable version manager (https://asdf-vm.com).
# This should replace all language-secific version managers.
ASDF_DIR="${ASDF_DIR:-$HOME/.asdf}"
if [[ ! -d $ASDF_DIR ]] && type brew &> /dev/null; then
    ASDF_DIR="$(brew --prefix asdf)"
fi
# shellcheck source=/dev/null
[ -s "$ASDF_DIR/asdf.sh" ] && \. "$ASDF_DIR/asdf.sh"

# Provide ASDF completions (already loaded if using Homebrew).
if [ -s "$ASDF_DIR/completions" ]; then
    fpath=("${ASDF_DIR}/completions $fpath")
    # initialise completions with ZSH's compinit
    autoload -Uz compinit
    compinit
fi

# shellcheck source=/dev/null
source "$ZSH/oh-my-zsh.sh"

unsetopt correct_all

# Load theme Powerlevel10K
# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
if test "${ZSH_THEME#*powerlevel10k}" != "$ZSH_THEME"; then
    # shellcheck source=/dev/null
    [ -f "$HOME"/.p10k.zsh ] && \. "$HOME"/.p10k.zsh
fi

## History command configuration
export HISTFILE="$HOME/.zsh_history"
export HISTSIZE=1000000000
export SAVEHIST=1000000000

setopt extended_history       # record timestamp of command in HISTFILE
setopt hist_expire_dups_first # delete duplicates first when HISTFILE size exceeds HISTSIZE
setopt hist_ignore_dups       # ignore duplicated commands history list
setopt hist_ignore_space      # ignore commands that start with space
setopt hist_verify            # show command with history expansion to user before running it

# nvm
export NVM_DIR="$HOME/.nvm"
# shellcheck source=/dev/null
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
# shellcheck source=/dev/null
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"

# Enable Python version management.
export PYENV_ROOT="$HOME/.pyenv"
export PATH="$PYENV_ROOT/bin:$PATH"
if command -v pyenv > /dev/null; then
    eval "$(pyenv init -)"
fi

# elixir/erlang shell history
export ERL_AFLAGS="-kernel shell_history enabled"
export ELIXIR_EDITOR="code"

export GIT_AUTHOR_EMAIL='amokan@gmail.com'
export KERL_BUILD_DOCS="yes"

if [[ "$OSTYPE" =~ ^darwin ]]; then
    KERL_CONFIGURE_OPTIONS="--without-javac --with-ssl=$(brew --prefix openssl@1.1)"
    export KERL_CONFIGURE_OPTIONS
fi

# Load additional exports from separate file.
if [ -f "$HOME"/.extra_exports ]; then
    # shellcheck source=/dev/null
    \. "$HOME"/.extra_exports
fi

# aliases
[ -d "$HOME/development/github" ] && alias github='cd $HOME/development/github'
[ -d "$HOME/development/junk" ] && alias junk='cd $HOME/development/junk'

alias gitconf='$EDITOR ~/.gitconfig'
alias zconf='$EDITOR ~/.zshrc'
alias editcron='env EDITOR=nano crontab -e'

alias o='open .'
alias gs='git status'

if command -v code > /dev/null; then
    alias s='code .'
fi

if command -v bat > /dev/null; then
    alias cat='bat'
fi

if command -v nvim > /dev/null; then
    export VIMCONFIG=~/.config/nvim
    export VIMDATA=~/.local/share/nvim
    
    alias vim=nvim
    alias vi=nvim
fi

if command -v kubectl > /dev/null; then
    alias k=kubectl
fi

alias myip='curl http://myexternalip.com/raw'

if [[ "$OSTYPE" =~ ^darwin ]]; then
    alias postgres-start='brew services start postgresql'
    alias postgres-stop='brew services stop postgresql'
    
    alias apps='cd /Applications'
    alias brew-root='cd /usr/local/Cellar'
fi

if command -v cloc > /dev/null; then
    alias elixir_cloc="cloc . --exclude-dir=.elixir_ls,deps,doc,cover,node_modules,priv,test,_build,.vs_code,.vagrant,rel,.vagrant,ansible,elm-stuff,build,bin --not-match-f='(package-lock.json)'"
    alias python_cloc="cloc . --exclude-dir=.vs_code --not-match-f='(package-lock.json)'"
    alias ruby_cloc="cloc . --exclude-dir=coverage,spec,doc,node_modules,temp,features,docker,tmp,vendor,.vs_code,.vagrant,.bundle,log,ansible --not-match-f='(package-lock.json)'"
    alias js_cloc="cloc . --exclude-dir=coverage,spec,doc,node_modules,temp,features,docker,tmp,vendor,.vs_code,.vagrant,.bundle,log,ansible --not-match-f='(package-lock.json)'"
fi

alias reload!='source $HOME/.zshrc'
alias cls='clear'

# Load additional aliases from separate file.
if [ -f "$HOME"/.extra_aliases ]; then
    # shellcheck source=/dev/null
    \. "$HOME"/.extra_aliases
fi
